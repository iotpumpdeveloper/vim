"A Plug Based Vim Profile

"Plug initial config
call plug#begin('~/.vim/plugged')

"vdebug
Plug 'vim-vdebug/vdebug'

"file explorer
Plug 'scrooloose/nerdtree' 

"es6 syntax for js
Plug 'isRuslan/vim-es6'

"most recent files
Plug 'mru.vim'

"syntax for .vue file
Plug 'posva/vim-vue'

"easy commmenting
Plug 'vim-scripts/comments.vim'

"powerful javascript code hinting and auto complete
Plug 'Valloric/YouCompleteMe'

"auto close html tags
Plug 'alvan/vim-closetag'
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.vue"

"auto closing bracket pairs
"Plug 'jiangmiao/auto-pairs'
Plug 'AutoClose'


call plug#end()

function! StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

function! Strip(input_string)
  return substitute(a:input_string, '^\s*\(.\{-}\)\s*$', '\1', '')
endfunction

function! ShowMostRecentFileList()
  "make sure the window focus is on the rightmost 
  wincmd l
  exec 'pedit! /tmp/vim_mru_file_list.index | wincmd k'
  map <ENTER> <esc>:silent call OpenCurrentLineAsFile()<cr>
endfunction

augroup closepreview
    autocmd InsertLeave * exec 'pedit ~/.vim/preview.output'
augroup END

function! PHPIDE_SETUP()
    "set up shortcuts and mappings so we will have an ide setup for php

    "set tabs and spaces for php
    filetype plugin indent on
    " show existing tab with 4 spaces width
    set tabstop=4
    " when indenting with '>', use 4 spaces width
    set shiftwidth=4
    " On pressing tab, insert 4 spaces
    set expandtab

    set fileformats+=dos

    "perform smart search
    map <C-O> :call PHPIDE_SmartSearch()<CR>

    "when mouse right click, perform smart search
    map <RightMouse> :call PHPIDE_SmartSearch()<CR>

    "when in normal node and press tab, perform smart search
    nmap <Tab> :call PHPIDE_SmartSearch()<CR>

    "use phanbug to debug php
    map <C-D> :call PhanbugDebugPHPFile()<CR>

    "when press control i in normal mode, open the current project file list 
    nmap <C-I> <esc>:call PHPIDE_OpenProjectFileList()<cr>

    "clear the register @0
    call setreg(0, [])

    "trim all whitespaces
    call StripTrailingWhitespaces()
endfunction

function! OpenCurrentLineAsFile()
    let line = getline('.')
    if strlen(line) > 0 && line[0] != '#'
        let filepath = fnameescape(line)
        wincmd j
        exec 'edit! '.filepath
    endif
endfunction

function! ShowProjectList()
    "make sure the window focus is on the rightmost 
    wincmd l
    au BufLeave *.list nmap r r
    pedit! ~/.vim/projects/project.list
    "map enter key to just switch to project, will not regenerate file index, 0 means no regenerate
    "but we always should regenerate the index
    nmap <ENTER> <esc>:call SwitchToProject(1)<cr>  
    "map r key in normal mode to regenerate file index and switch to project, 1 means regenerate
    nmap r <esc>:call SwitchToProject(1)<cr> 
    wincmd k
endfunction

function! SwitchToProject(regen_index)
    nmap <C-I> <esc>:call PHPIDE_OpenProjectFileList()<cr>

    let $project_file_index = '~/.vim/projects/fileindex'
    let $project_function_index = '~/.vim/projects/php_function_list'
    let line = getline('.')
    let $cur_vim_project = line
    let project_dir = ''
    let project_file_extensions = ''
    if strlen(line) > 0 && line[0] != '#'
        let line_comps = split(line, "|")
        if len(line_comps) == 2
            let project_dir = Strip(line_comps[0])
            let project_file_extensions = Strip(line_comps[1])
            if a:regen_index == 1
                exec 'cd '.project_dir 
                "set the global variable for current project directory 
                let $cur_vim_project_dir = trim(system('pwd'))
                call RegenerateFileIndex(project_file_extensions)
            endif
        else
            let project_dir = Strip(line)
            exec 'cd '.project_dir 
        endif 

        if len(project_file_extensions) == 0
            "no extension is given, simply open the most recently open files
            exec 'silent edit! /tmp/vim_mru_file_list.index'
        else 
            call PHPIDE_OpenProjectFileList()
        endif
        NERDTree .
        wincmd w   "try to make sure that the focus is one the file index, not nerdtree 
        call PHPIDE_SETUP()
    endif
endfunction

function! RegenerateFileIndex(project_file_extensions)
    echom "Generating project related indexes..."
    let result_list = '~/.vim/preview.output'
    let cmd1 = 'find $(pwd) -type f -name "*.'.a:project_file_extensions.'" >'.$project_file_index
    let x = system(cmd1)
    let cmd2 = 'php -c ~/cli.ini ~/.vim/plugged/phim/bin/phim project.gethash --project '''.$cur_vim_project.''''
    let $cur_vim_project_hash = system(cmd2)
    let cmd3 = 'php -c ~/cli.ini ~/.vim/plugged/phim/bin/phim project.init --project '''.$cur_vim_project.''' &'
    let y = system(cmd3)
    let g:openFiles = []
    let g:openFilesIndex = -1
endfunction


function! GotoBuffer(bufname)
    let bufmap = map(range(1, winnr('$')), '[bufname(winbufnr(v:val)), v:val]')
    let thewindow = filter(bufmap, 'v:val[0] =~ a:bufname')[0][1]
    "execute thewindow 'wincmd w'
endfunction

function! GetVisualSelection()
    try
        let a_save = @a
        normal! gv"ay
        return @a
    finally
        let @a = a_save
    endtry
endfunction

function! ProcessFileChangedShell() 
    if v:fcs_reason == 'mode' || v:fcs_reason == 'time' 
        let v:fcs_choice = '' 
    else 
        let v:fcs_choice = 'ask' 
    endif 
endfunction 

"autocmd FileChangedShell <buffer> call ProcessFileChangedShell() 

function! PHPIDE_SmartSearch()
    let result_list = '~/.vim/preview.output'
    let curFile = expand('%:p') 
    let curPos = getcurpos()[2]
    let lineNum = line('.')
    let cmd = '~/.vim/plugged/phim/bin/phim project.search --file '.curFile.' --line '.lineNum.' --pos '.curPos.' --projecthash '''.$cur_vim_project_hash.''' > '.result_list
    let x = system(cmd)
    let result = system('cat '.result_list)
    exec 'pedit! '.result_list
    wincmd k
    map <ENTER> <esc>:silent call PHPIDE_OpenCurrentLineAsFile()<cr>
    "if the result contains only 1 entry, immediate only the matching file
    let line_comps = split(result, "\n")
    if len(line_comps) == 1
        call PHPIDE_OpenCurrentLineAsFile()
    endif
endfunction

function! PHPIDE_OpenProjectFileList()
  exec 'silent pedit! '.$project_file_index
  "now make sure we just display the file index
  map <ENTER> <esc>:call PHPIDE_OpenCurrentLineAsFile()<cr>
  wincmd k
endfunction

function! PhanbugOpenResultInBuffer(result)
  "split a dedicated buffer
  if bufwinnr('__PHANBUG_DEBUG_BUFFER__') < 0
    set splitright
    vsplit __PHANBUG_DEBUG_BUFFER__
    wincmd l
  endif
  call GotoBuffer('__PHANBUG_DEBUG_BUFFER__')
  "clean things up
  normal! ggdG
  setlocal filetype=phanbugoutput
  setlocal buftype=nofile
  "append the result
  call append(0, split(a:result, '\v\n'))
  normal! gg
  "back to the current buffer
  "wincmd h
endfunction

function! PHPIDE_OpenCurrentLineAsFile()
  let line = getline('.')
  let line_comps = split(line, " ")
  if len(line_comps) < 2
    let possibleFile = line_comps[0]
    let fileLength = strlen(possibleFile)
    if possibleFile[fileLength - 4:fileLength] == '.php'
      let filepath = fnameescape(possibleFile)
      call PHPIDE_OpenFileForEdit(filepath, 1)
    endif
    return
  endif
  let possibleFile = line_comps[1]
  let comps = split(possibleFile, "(")
  if len(comps) < 2
    return
  endif 
  let file = comps[0]
  let line = substitute(comps[1],"\(","","g")
  let filepath = fnameescape(file)
  call PHPIDE_OpenFileForEdit(filepath, line)
endfunction

function! PHPIDE_OpenFileForEdit(filepath, lineNumber)
  wincmd j
  let numOfTabs = tabpagenr('$')
  let i = 1
  let shouldOpenNewTab = 1
  if numOfTabs > 1
    while i <= numOfTabs
      exec 'tabn '.i
      if expand('%p') == a:filepath
        let shouldOpenNewTab = 0
        break
      endif
      let i += 1
    endwhile
  endif

  if shouldOpenNewTab == 1
    exec 'tabedit '.a:filepath
  endif
  call cursor(a:lineNumber, 1)
endfunction

function! PhanbugDebugPHPFile()
  "first, see if there is variable in register 0, the most yanked text
  let possibleVariable = @0
  if strlen(possibleVariable) == 0
    "get from the current cursor
    let possibleVariable = expand('<cword>')
  endif
  "clear register
  call setreg(0, [])
  let l = line(".")
  let cmd = ''
  if strlen(possibleVariable) > 0 && possibleVariable != '{'
    let cmd = '~/phanbug/phanbug --cmd "sh ~/tmp.sh" --action inspect --file '.expand('%:p').' --line '.l.' --depth 4 --hardbreak 1 --variable '''.possibleVariable.''''
  else
    let cmd = '~/phanbug/phanbug --cmd "sh ~/tmp.sh" --action inspect --file '.expand('%:p').' --line '.l.' --depth 4 --hardbreak 1'
  endif
  let result=system(cmd)
  exec 'pedit! /tmp/phanbug_output'
  wincmd k
  map <ENTER> <esc>:silent call PHPIDE_OpenCurrentLineAsFile()<cr>
endfunction

" set GUI font
set guifont=Monaco:h12

" display full path of an open file
set statusline+=%F:%l:%v

"highlight all searches
:set viminfo^=h

"incremental search
:set incsearch

"try to disable GUI warnings
set guioptions+=c

"Custom plugin configuration 

map     <C-N>      :NERDTreeToggle<cr>

set nofoldenable    " disable folding

set noswapfile "no swap file creation

set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set modifiable "make buffer modifiable"
"set ruler
set ruler
set rulerformat=%l,%v

syntax on
set synmaxcol=2048
set hlsearch
set hidden
set ic "case insensitive search"
set ts=2
set expandtab
set tabstop=2
set clipboard=unnamed
set autoindent
set shiftwidth=2
set number 
set paste
set formatoptions=l
set lbr

"longest auto complete
set completeopt=longest

"jump to the end of line with ctrl+e in insert mode
inoremap <C-e> <C-o>$

"macvim specific settings for mouse
set mouse=a
set mousemodel=extend 

"tab shortcuts
map     <C-T>      :tabnew <cr>
map     <C-H>       :tabpre<CR>
imap     <C-H>       <ESC>:tabpre<CR>
map     <C-L>       :tabnext<CR>
imap     <C-L>       <ESC>:tabnext<CR>
map     <C-Q>       <ESC>:bd<CR>
map     <C-W>       <C-W>W 

"MRU config 
" set max lenght for the mru file list
let g:fzf_mru_file_list_size = 10 " default value
" set path pattens that should be ignored
let g:fzf_mru_ignore_patterns = 'fugitive\|\.git/\|\_^/tmp/' " default value 

"exclude search index in MRU
let MRU_Exclude_Files = '\.list$\|\.index$\|\.si$\|\.tip$\|\.term$\|\.fugitiveblame$\|\.tmp'

"customize MRU file
let MRU_File = '/tmp/vim_mru_file_list.index'

"ignore file changes and just auto read it
set autoread

set noerrorbells visualbell t_vb=

"show most recent files 
map     <C-R>       :call ShowMostRecentFileList()<CR> 

"set up php
"au BufEnter *.php :call PHPIDE_SETUP()

"in the tmp file, when click, open the current file
"au BufEnter tmp nmap <LeftRelease> :silent call OpenCurrentLineAsFile()<CR>

"swtiching among windows 
nmap <S-h> :wincmd h<cr>
nmap <S-l> :wincmd l<cr>
nmap <S-j> :wincmd j<cr>
nmap <S-k> :wincmd k<cr>

"project setup
map <C-P>  :call ShowProjectList() <cr> 
"set current vim project directory 
let $cur_vim_project_dir = "current"

"custom file type configuration
au FileType javascript setl sw=2 sts=2 et
au FileType css setl sw=2 sts=2 et
au FileType vue setl sw=2 sts=2 et

"trim trailing whitespace in the following files
autocmd BufWritePre *.js,*.vue :call StripTrailingWhitespaces()

"set mjs file syntax highlighting
autocmd BufNewFile,BufRead *.mjs   set syntax=javascript
