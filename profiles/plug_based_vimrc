"

"Plug initial config
call plug#begin('~/.vim/plugged')

"file explorer
Plug 'scrooloose/nerdtree' 

"es6 syntax for js
Plug 'kern/vim-es6'

"most recent files
Plug 'mru.vim'

"syntax for .vue file
Plug 'posva/vim-vue'

"easy commmenting
Plug 'vim-scripts/comments.vim'

"powerful javascritp code hinting and auto complete
Plug 'Valloric/YouCompleteMe'

"auto close html tags
Plug 'alvan/vim-closetag'
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.vue"

call plug#end()

function! StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

function! Strip(input_string)
    return substitute(a:input_string, '^\s*\(.\{-}\)\s*$', '\1', '')
endfunction

function! ShowMostRecentFileList()
     "make sure the window focus is on the rightmost 
    wincmd l
    exec 'pedit! /tmp/vim_mru_file_list.index | wincmd k'
    map <ENTER> <esc>:silent call OpenCurrentLineAsFile()<cr>
endfunction

function! OpenCurrentLineAsFile()
    let line = getline('.')
    if strlen(line) > 0 && line[0] != '#'
        let filepath = fnameescape(line)
        wincmd j
        exec 'edit! '.filepath
        e
    endif
endfunction

function! ShowProjectList()
    "make sure the window focus is on the rightmost 
    wincmd l
    au BufLeave *.list nmap r r
    pedit! ~/.vim/projects/project.list
    "map enter key to just switch to project, will not regenerate file index, 0 means no regenerate
    "but we always should regenerate the index
    nmap <ENTER> <esc>:call SwitchToProject(1)<cr>  
    "map r key in normal mode to regenerate file index and switch to project, 1 means regenerate
    nmap r <esc>:call SwitchToProject(1)<cr> 
    wincmd k
endfunction

function! SwitchToProject(regen_index)
  let $project_file_index = '~/.vim/projects/fileindex'
  let line = getline('.')
  let project_dir = ''
  let project_file_extensions = ''
  if strlen(line) > 0 && line[0] != '#'
    let line_comps = split(line, "|")
    if len(line_comps) == 2
      let project_dir = Strip(line_comps[0])
      let project_file_extensions = Strip(line_comps[1])
      if a:regen_index == 1
        echom 'generating index'
        exec 'cd '.project_dir 
        call RegenerateFileIndex(project_file_extensions)
      endif
    else
      let project_dir = Strip(line)
      exec 'cd '.project_dir 
    endif 

    "set the global variable for current project directory 
    let $cur_vim_project_dir = project_dir

    if len(project_file_extensions) == 0
      "no extension is given, simply open the most recently open files
      exec 'silent edit! /tmp/vim_mru_file_list.index'
    else 
      exec 'silent edit! '.$project_file_index
    endif
    map <ENTER> <esc>:silent call OpenCurrentLineAsFile()<cr>
    NERDTree .
    wincmd w   "try to make sure that the focus is one the file index, not nerdtree
  endif
endfunction

function! RegenerateFileIndex(project_file_extensions)
  let x = system('find . -type f -name "*.'.a:project_file_extensions.'" >'.$project_file_index)
  echom 'find . -type f -name "*.'.a:project_file_extensions.'" >'.$project_file_index
endfunction

function! GetVisualSelection()
  return expand('<cword>')
endfunction

function! FindPHPClass()
  let s:word = GetVisualSelection()
  let x = system('grep /'.s:word.'.php '.$project_file_index.' > tmp')
  let result = system('cat tmp')
  exec 'pedit! tmp'
  wincmd k
  if strlen(result) > 0 && len(split(result, "\n")) == 1 
    call OpenCurrentLineAsFile() 
    wincmd j
  endif
endfunction

" set GUI font
set guifont=Monaco:h12

" display full path of an open file
set statusline+=%F

"highlight all searches
:set viminfo^=h

"incremental search
:set incsearch

"try to disable GUI warnings
set guioptions+=c

"Custom plugin configuration 

map     <C-N>      :NERDTreeToggle<cr>

set nofoldenable    " disable folding

set noswapfile "no swap file creation

set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set modifiable "make buffer modifiable"
"set ruler
set ruler

syntax on
set synmaxcol=2048
set hlsearch
set hidden
set ic "case insensitive search"
set ts=2
set expandtab
set tabstop=2
set clipboard=unnamed
set autoindent
set shiftwidth=2
set number 
set paste
set formatoptions=l
set lbr

"longest auto complete
set completeopt=longest

"macvim specific settings for mouse
set mouse=a
set mousemodel=extend 

"tab shortcuts
map     <C-T>      :tabnew <cr>
map     <C-H>       :tabpre<CR>
imap     <C-H>       <ESC>:tabpre<CR>
map     <C-L>       :tabnext<CR>
imap     <C-L>       <ESC>:tabnext<CR>
map     <C-Q>       <ESC>:bd<CR>
map     <C-W>       <C-W>W 
map     <C-I>       :nohl<cr> 

"MRU config 
" set max lenght for the mru file list
let g:fzf_mru_file_list_size = 10 " default value
" set path pattens that should be ignored
let g:fzf_mru_ignore_patterns = 'fugitive\|\.git/\|\_^/tmp/' " default value 

"exclude search index in MRU
let MRU_Exclude_Files = '\.list$\|\.index$\|\.si$\|\.tip$\|\.term$\|\.fugitiveblame$\|\.tmp'

"customize MRU file
let MRU_File = '/tmp/vim_mru_file_list.index'

"ignore file changes and just auto read it
set autoread

"show most recent files 
map     <C-R>       :call ShowMostRecentFileList()<CR> 

"try to find php file
au BufEnter *.php map <C-O> :call FindPHPClass()<CR>
"au BufEnter *.php nmap <LeftRelease> :call FindPHPClass()<CR>

"in the tmp file, when click, open the current file
"au BufEnter tmp nmap <LeftRelease> :silent call OpenCurrentLineAsFile()<CR>

"swtiching among windows 
nmap <S-h> :wincmd h<cr>
nmap <S-l> :wincmd l<cr>
nmap <S-j> :wincmd j<cr>
nmap <S-k> :wincmd k<cr>

"project setup
map <C-P>  :call ShowProjectList() <cr> 
"set current vim project directory 
let $cur_vim_project_dir = "current"

"go back to previous open file
map <C-B> :e#<cr>

"custom file type configuration
au FileType javascript setl sw=2 sts=2 et
au FileType css setl sw=2 sts=2 et
au FileType vue setl sw=2 sts=2 et
au FileType php setl sw=4 sts=4 et

"trim trailing whitespace in the following files
autocmd BufWritePre *.js,*.vue,*.php :call StripTrailingWhitespaces()

"set mjs file syntax highlighting
autocmd BufNewFile,BufRead *.mjs   set syntax=javascript
